g.V('AMI').property(list, 'Amazon Linux 2', 'Server side support for all versions of SSL is disabled by default')
g.V('AMI').property(list, 'Amazon Linux 2', 'TLS 1.3 is not installed by default')
g.V('AMI').property(list, 'Amazon Linux 2', g.V('Instance').properties('troubleshooting').hasValue(containing('Linux 2')).value())
g.V('Instance').properties('troubleshooting').hasValue(containing('Linux 2')).drop()
g.V('AMI').property(list, 'Amazon Linux 2', 'Self signed TLS certificate are acceptable for troubleshooting. For production, self signed certificate are not recommended.')
g.V('AMI').property(list, 'Amazon Linux 2', 'To install latest version of TLS use the command `sudo yum install -y mod_ssl`')
g.addV('process').property('id','AmzLinux2Tls').property('name', 'Configure SSL/TLS on Amazon Linux 2')
g.V('AmzLinux2Tls').addE('CONTRIBUTES_SECURITY').to(g.V('Instance')).property(single, 'notes', 'Only for Amazon Linux 2')
g.V('AmzLinux2Tls').addE('CONTRIBUTES_SECURITY').to(g.V('AMI')).property(single, 'notes', 'Only for Amazon Linux 2')
g.V('AmzLinux2Tls').property(list, 'prerequisites', 'Launch EBS-backed Amazon Linux 2 instance')
g.V('AmzLinux2Tls').property(list, 'prerequisites', 'Configure security group to allow traffic on TCP ports - SSH (22), HTTP (80), HTTPS (443)')
g.V('AmzLinux2Tls').property(list, 'prerequisites', 'Install Apache Web Server')
g.V('AmzLinux2Tls').property(list, 'prerequisites', 'Register a domain name for web server')
g.addV('process-step').property('id','AmzLinux2Tls-1').property('name', 'Check Apache Web Server is running')
g.V('AmzLinux2Tls').addE('NEXT').to(g.V('AmzLinux2Tls-1'))
g.V('AmzLinux2Tls-1').property(single, 'command', 'sudo systemctl is-enabled httpd')
g.V('AmzLinux2Tls-1').property(single, 'expected-outcome','Should return a value enabled')
g.V('AmzLinux2Tls-1').property(single, 'purpose','Even though Apache Web Server is installed it should be running for subsequent steps')
g.addV('process-step').property('id', 'AmzLinux2Tls-1a').property('name', 'Auto start Apache Web Server on booting')
g.V('AmzLinux2Tls-1').addE('NEXT_OPTIONAL').to(g.V('AmzLinux2Tls-1a'))
g.V('AmzLinux2Tls-1a').property(single, 'command', 'sudo systemctl start httpd && sudo systemctl enable httpd')
g.V('AmzLinux2Tls-1a').property(single, 'expected-outcome','Should be a empty prompt returned')
g.V('AmzLinux2Tls-1a').property(single, 'purpose','To save the trouble of starting Apache Web Server every time manually.')
g.addV('process-step').property('id', 'AmzLinux2Tls-2').property('name', 'Update all software packages')
g.V('AmzLinux2Tls-1').addE('NEXT').to(g.V('AmzLinux2Tls-2'))
g.V('AmzLinux2Tls-1a').addE('NEXT').to(g.V('AmzLinux2Tls-2'))
g.V('AmzLinux2Tls-2').property(single, 'command', 'sudo yum update -y')
g.V('AmzLinux2Tls-2').property(single, 'expected-outcome','Multiple prints on the standard ouput can happen. Should ensure no error appears.')
g.V('AmzLinux2Tls-2').property(single, 'purpose','To update all the software packages to latest version.')
g.addV('process-step').property('id', 'AmzLinux2Tls-3').property('name', 'Install TLS module for Apache')
g.V('AmzLinux2Tls-2').addE('NEXT').to(g.V('AmzLinux2Tls-3'))
g.V('AmzLinux2Tls-3').property(single, 'command', 'sudo yum install -y mod_ssl')
g.V('AmzLinux2Tls-3').property(list, 'expected-outcome','File should exist /etc/httpd/conf.d/ssl.conf')
g.V('AmzLinux2Tls-3').property(list, 'expected-outcome','File should exist /etc/pki/tls/certs/make-dummy-cert')
g.V('AmzLinux2Tls-3').property(single, 'purpose','Installs the module required for Apache to accept HTTPS connections')
g.V('AmzLinux2Tls-3').property(list, 'comments','/etc/httpd/conf.d/ssl.conf is configuration file for mod_ssl. Contains entries for TLS version, encryption keys, encryption ciphers to accept and certificates')
g.V('AmzLinux2Tls-3').property(list, 'comments','/etc/pki/tls/certs/make-dummy-cert is script to generate self-signed X.509 certificate and private key for the web server.')
g.addV('process-step').property('id', 'AmzLinux2Tls-4').property('name', 'Generate self-signed certificate')
g.V('AmzLinux2Tls-3').addE('NEXT').to(g.V('AmzLinux2Tls-4'))
g.V('AmzLinux2Tls-4').property(list, 'command', '1> cd /etc/pki/tls/certs')
g.V('AmzLinux2Tls-4').property(list, 'command', '2> ./make-dummy-cert localhost.crt')
g.V('AmzLinux2Tls-4').property(list, 'expected-outcome','File should exist /etc/pki/tls/certs/localhost.crt')
g.V('AmzLinux2Tls-4').property(single, 'purpose','Self-signed certificate are cheaper way to boot up and test TLS support.')
g.V('AmzLinux2Tls-4').property(list, 'comments','/etc/httpd/conf.d/ssl.conf already carries the name of localhost.crt for SSLCertificateFile directive. Thus, no change is required.')
g.V('AmzLinux2Tls-4').property(list, 'comments','The file contains both self-signed certificate and the certificate\'s private key.')
g.V('AmzLinux2Tls-4').property(list, 'comments','Though PEM is a widely used format. But that is only convinence. The file structure (with BEGIN and END markers for key and certificate) is important and crt file extension is just fine.')
g.addV('process-step').property('id', 'AmzLinux2Tls-5').property('name', 'Disable a seperate key file directive')
g.V('AmzLinux2Tls-4').addE('NEXT').to(g.V('AmzLinux2Tls-5'))
g.V('AmzLinux2Tls-5').property(single, 'instruction', 'comment the line resembling "SSLCertificateKeyFile /etc/pki/tls/private/localhost.key"')
g.V('AmzLinux2Tls-5').property(single, 'purpose','Self-signed certificate does not have a seperate file for key, thus commenting this line shunts Apache to look for a localhost.key file.')
g.addV('process-step').property('id', 'AmzLinux2Tls-6').property('name', 'Restart Apache Web Server')
g.V('AmzLinux2Tls-5').addE('NEXT').to(g.V('AmzLinux2Tls-6'))
g.V('AmzLinux2Tls-6').property(single, 'command', 'sudo systemctl restart httpd')
g.V('AmzLinux2Tls-6').property(single, 'purpose','Ensure Apache picks up the changes.')
g.addV('process-step').property('id', 'AmzLinux2Tls-7').property('name', 'Test the SSL configuration.')
g.V('AmzLinux2Tls-6').addE('NEXT').to(g.V('AmzLinux2Tls-7'))
g.V('AmzLinux2Tls-7').property(single, 'instruction', 'browse to the public IP or the domain name using https://')
g.V('AmzLinux2Tls-7').property(list, 'expected-outcome','You should be greated with security warning')
g.V('AmzLinux2Tls-7').property(list, 'expected-outcome','After accepting the risk, default page of the site should load.')
g.addV('process').property('id','PublicCaCert').property('name', 'Process to obtain public CA certificate')
g.V('PublicCaCert').addE('CONTRIBUTES_SECURITY').to(g.V('Instance'))
g.V('PublicCaCert').addE('CONTRIBUTES_SECURITY').to(g.V('AMI'))
g.addV('process-step').property('id','PublicCaCert-1').property('name', 'Generate a Certificate Signing Request (CSR) from a private key')
g.addV('process-step').property('id','PublicCaCert-2').property('name', 'Submit the CSR to a Certificate Authority(CA)')
g.addV('process-step').property('id','PublicCaCert-3').property('name', 'Obtain a signed host certificate')
g.addV('process-step').property('id','PublicCaCert-4').property('name', 'Configure Apache to use the certificate')
g.V('PublicCaCert').property(list, 'comments', 'Self-signed X.509 certificate is cryptologically identical to CA-signed certificate. The difference between them is social and not mathematical.')
g.V('PublicCaCert').property(list, 'comments', 'X.509 certificate consists primarily of a public key corresponding to the private key at server and a signature by the CA that is cryptologically tied to the public key.')
g.V('PublicCaCert').property(list, 'comments', 'When a browser accesses a site in HTTPS, the site presents the certificate. Browser validates the CA signature against its own trusted CA list. The CA should exsist either directly or should be reachable via chain of trust. Browser then negotiates a fast encrypted data channel with the server and loads the page.')
g.V('PublicCaCert').property(list, 'comments', 'Minimum private key modulus (length of the key) is 2048 bits for RSA Keys as of 2019. Which shall protect documents on the web till 2030.')
g.V('PublicCaCert').property(list, 'comments', 'Default private key modulus (length of the key) is 2048 bits for RSA Keys generated via OpenSSL in Amazon Linux 2.')
g.addV('process').property('id','AmzLinux2CaCert').property('name', 'Obtain a CA-signed certificate')
g.V('AmzLinux2CaCert').addE('CONTRIBUTES_SECURITY').to(g.V('Instance'))
g.V('AmzLinux2CaCert').addE('CONTRIBUTES_SECURITY').to(g.V('AMI'))
g.addV('process-step').property('id','AmzLinux2CaCert-1').property('name', 'Generate a private key for the server')
g.V('AmzLinux2CaCert').addE('NEXT').to(g.V('AmzLinux2CaCert-1'))
g.V('AmzLinux2CaCert-1').property(single, 'command', 'sudo openssl genrsa -out custom.key')
g.V('AmzLinux2CaCert-1').property(single, 'expected-outcome','File custom.key should exist in the local directory')
g.V('AmzLinux2CaCert-1').property(single, 'purpose','Generates the private key to sign the CSR.')
g.addV('process-step').property('id','AmzLinux2CaCert-1a').property('name', 'Generate a private key of modulus 4096 for the server')
g.V('AmzLinux2CaCert').addE('NEXT_OPTIONAL').to(g.V('AmzLinux2CaCert-1a'))
g.V('AmzLinux2CaCert-1a').property(single, 'command', 'sudo openssl genrsa -out custom.key 4096')
g.V('AmzLinux2CaCert-1a').property(single, 'expected-outcome','File custom.key should exist in the local directory')
g.V('AmzLinux2CaCert-1a').property(single, 'purpose','Generates the private key to sign the CSR.')
g.addV('process-step').property('id','AmzLinux2CaCert-1b').property('name', 'Generate a private key of modulus 4096 with password for the server')
g.V('AmzLinux2CaCert').addE('NEXT_OPTIONAL').to(g.V('AmzLinux2CaCert-1b'))
g.V('AmzLinux2CaCert-1b').property(single, 'command', 'sudo openssl genrsa -aes128 -passout pass:abcde12345 -out custom.key 4096')
g.V('AmzLinux2CaCert-1b').property(single, 'expected-outcome','File custom.key should exist in the local directory')
g.V('AmzLinux2CaCert-1b').property(single, 'purpose','Generates the private key to sign the CSR.')
g.V('AmzLinux2CaCert-1b').property(list, 'comments','Resulting private key file will encrypt the private key using the password.')
g.V('AmzLinux2CaCert-1b').property(list, 'comments','Each time the server is started the password will have to be supplied over SSH connection.')
g.addV('process-step').property('id','AmzLinux2CaCert-1c').property('name', 'Generate a private key with non-RSA algorithm')
g.V('AmzLinux2CaCert').addE('NEXT_OPTIONAL').to(g.V('AmzLinux2CaCert-1c'))
g.V('AmzLinux2CaCert-1c').property(single, 'command', 'sudo openssl ecparam -name prime256v1 -out custom.key -genkey')
g.V('AmzLinux2CaCert-1c').property(single, 'expected-outcome','File custom.key should exist in the local directory')
g.V('AmzLinux2CaCert-1c').property(single, 'purpose','Generates the private key to sign the CSR.')
g.V('AmzLinux2CaCert-1c').property(single, 'comments','Uses a 256-bit elliptic curve private key using prime 256v1 algorithm.')
g.addV('process-step').property('id','AmzLinux2CaCert-2').property('name', 'Restrict access to the private key file')
g.V('AmzLinux2CaCert-1').addE('NEXT').to(g.V('AmzLinux2CaCert-2'))
g.V('AmzLinux2CaCert-1a').addE('NEXT').to(g.V('AmzLinux2CaCert-2'))
g.V('AmzLinux2CaCert-1b').addE('NEXT').to(g.V('AmzLinux2CaCert-2'))
g.V('AmzLinux2CaCert-1c').addE('NEXT').to(g.V('AmzLinux2CaCert-2'))
g.V('AmzLinux2CaCert-2').property(list, 'command', '1> sudo chown root:root custom.key')
g.V('AmzLinux2CaCert-2').property(list, 'command', '2> sudo chmod 600 custom.key')
g.V('AmzLinux2CaCert-2').property(list, 'command', '3> ls -al custom.key')
g.V('AmzLinux2CaCert-2').property(single, 'expected-outcome','On the console - ` -rw------- root root custom.key `')
g.addV('process-step').property('id','AmzLinux2CaCert-3').property('name', 'Create a CSR with the private key')
g.V('AmzLinux2CaCert-2').addE('NEXT').to(g.V('AmzLinux2CaCert-3'))
g.V('AmzLinux2CaCert-3').property(single, 'command', 'sudo openssl req -new -key custom.key -out csr.pem')
g.V('AmzLinux2CaCert-3').property(single, 'expected-outcome','Dialog should prompt for the details - Country Name, State or Province Name, Locality Name, Organization Name, Organizational Unit Name, Common Name, Email address, CSR file password')
g.V('AmzLinux2CaCert-3').property(list, 'comments','Except Common Name in the expected-output, all other fields are optional.')
g.V('AmzLinux2CaCert-3').property(list, 'comments','CSR file password is used only for interaction with CA. It does not have any impact on the server operations or is not used to password protect the private key file.')
g.V('AmzLinux2CaCert-3').property(list, 'comments','Resulting .pem file contains the metadta entered in the dialog, the public key corresponding to the private key and your signature for the public key.')
g.addV('process-step').property('id','AmzLinux2CaCert-4').property('name', 'Submit the CSR to CA')
g.V('AmzLinux2CaCert-3').addE('NEXT').to(g.V('AmzLinux2CaCert-4'))
g.V('AmzLinux2CaCert-4').property(list, 'comments','Follow the instruction given by the CA to submit the CSR.')
g.V('AmzLinux2CaCert-4').property(list, 'comments','Some CA might ask for one or more Subject Alternate Name (SAN). SAN for www.example.com could be like example.com')
g.addV('process-step').property('id','AmzLinux2CaCert-5').property('name', 'Copy the approved certificate to local directory')
g.V('AmzLinux2CaCert-4').addE('NEXT').to(g.V('AmzLinux2CaCert-5'))
g.V('AmzLinux2CaCert-5').property(list, 'comments','You might along with the certificate receive a intermediate certificate form the CA.')
g.V('AmzLinux2CaCert-5').property(list, 'comments','Intermediate certificate helps in completing the chain of trus for a specific CA.')
g.V('AmzLinux2CaCert-5').property(list, 'comments','Place the certificate and any intermediate certificate to /etc/pki/tls/certs.')
g.addV('process-step').property('id','AmzLinux2CaCert-6').property('name', 'Restrict access to the certificate file')
g.V('AmzLinux2CaCert-5').addE('NEXT').to(g.V('AmzLinux2CaCert-6'))
g.V('AmzLinux2CaCert-5').addE('REFERENCE').to(g.V('AmzLinux2CaCert-2')).property(single, 'notes', 'Execute the command with change in file name for both certificate and intermediate certificate.')
g.addV('process-step').property('id','AmzLinux2CaCert-7').property('name', 'Copy the private key file where Apache Web Server could find it')
g.V('AmzLinux2CaCert-6').addE('NEXT').to(g.V('AmzLinux2CaCert-7'))
g.V('AmzLinux2CaCert-7').addE('REFERENCE').to(g.V('AmzLinux2CaCert-2')).property(single, 'notes', 'Execute the command with change in file name for key file.')
g.V('AmzLinux2CaCert-7').property(list, 'comments','Place the certificate and any intermediate certificate to /etc/pki/tls/private.')
g.addV('process-step').property('id','AmzLinux2CaCert-8').property('name', 'Change Apache configuration for certificate file')
g.V('AmzLinux2CaCert-7').addE('NEXT').to(g.V('AmzLinux2CaCert-8'))
g.V('AmzLinux2CaCert-8').property(single, 'instruction','Change the SSLCertificateFile directive in /etc/httpd/conf.d/ssl.conf file to /etc/pki/tls/certs/custom.crt')
g.V('AmzLinux2CaCert-8').property(single, 'purpose','This helps Apache read the CA certificate and use it when requests are sent to the web server.')
g.addV('process-step').property('id','AmzLinux2CaCert-8a').property('name', 'Change Apache configuration for intermediate certificate file')
g.V('AmzLinux2CaCert-7').addE('NEXT_OPTIONAL').to(g.V('AmzLinux2CaCert-8a'))
g.V('AmzLinux2CaCert-8a').property(single, 'instruction','Change the SSLCACertificateFile directive in /etc/httpd/conf.d/ssl.conf file to /etc/pki/tls/certs/intermediate.crt')
g.V('AmzLinux2CaCert-8a').property(single, 'purpose','Only needed if CA provides the intermediate certificate file')
g.addV('process-step').property('id','AmzLinux2CaCert-9').property('name', 'Change Apache configuration for key file')
g.V('AmzLinux2CaCert-8').addE('NEXT').to(g.V('AmzLinux2CaCert-9'))
g.V('AmzLinux2CaCert-8a').addE('NEXT').to(g.V('AmzLinux2CaCert-9'))
g.V('AmzLinux2CaCert-9').property(single, 'instruction','Change the SSLCertificateKeyFile directive in /etc/httpd/conf.d/ssl.conf file to /etc/pki/tls/private/custom.key')
g.V('AmzLinux2CaCert-9').property(single, 'purpose','This helps Apache read the validate agains the key file.')
g.addV('process-step').property('id','AmzLinux2CaCert-10').property('name', 'Restart Apache')
g.V('AmzLinux2CaCert-9').addE('NEXT').to(g.V('AmzLinux2CaCert-10'))
g.V('AmzLinux2CaCert-10').property(single, 'command','sudo systemctl restart httpd')
g.V('AmzLinux2CaCert-10').property(single, 'purpose','This helps Apache reflect all the changes performed on the instance.')
g.addV('process-step').property('id','AmzLinux2CaCert-11').property('name', 'Restart Apache')
g.V('AmzLinux2CaCert-10').addE('NEXT').to(g.V('AmzLinux2CaCert-11'))
g.V('AmzLinux2CaCert-11').addE('REFERENCE').to(g.V('AmzLinux2Tls-7')).property('notes', 'Perform the same step to verify the configuration.')
