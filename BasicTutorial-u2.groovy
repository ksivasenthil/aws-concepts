g.V('AMI').property(list, 'Amazon Linux 2', 'Server side support for all versions of SSL is disabled by default')
g.V('AMI').property(list, 'Amazon Linux 2', 'TLS 1.3 is not installed by default')
g.V('AMI').property(list, 'Amazon Linux 2', g.V('Instance').properties('troubleshooting').hasValue(containing('Linux 2')).value())
g.V('Instance').properties('troubleshooting').hasValue(containing('Linux 2')).drop()
g.V('AMI').property(list, 'Amazon Linux 2', 'Self signed TLS certificate are acceptable for troubleshooting. For production, self signed certificate are not recommended.')
g.V('AMI').property(list, 'Amazon Linux 2', 'To install latest version of TLS use the command `sudo yum install -y mod_ssl`')
g.addV('process').property('id','AmzLinux2Tls').property('name', 'Configure SSL/TLS on Amazon Linux 2')
g.V('AmzLinux2Tls').addE('CONTRIBUTES_SECURITY').to(g.V('Instance')).property(single, 'notes', 'Only for Amazon Linux 2')
g.V('AmzLinux2Tls').addE('CONTRIBUTES_SECURITY').to(g.V('AMI')).property(single, 'notes', 'Only for Amazon Linux 2')
g.V('AmzLinux2Tls').property(list, 'prerequisites', 'Launch EBS-backed Amazon Linux 2 instance')
g.V('AmzLinux2Tls').property(list, 'prerequisites', 'Configure security group to allow traffic on TCP ports - SSH (22), HTTP (80), HTTPS (443)')
g.V('AmzLinux2Tls').property(list, 'prerequisites', 'Install Apache Web Server')
g.V('AmzLinux2Tls').property(list, 'prerequisites', 'Register a domain name for web server')
g.addV('process-step').property('id','AmzLinux2Tls-1').property('name', 'Check Apache Web Server is running')
g.V('AmzLinux2Tls').addE('NEXT').to(g.V('AmzLinux2Tls-1'))
g.V('AmzLinux2Tls-1').property(single, 'command', 'sudo systemctl is-enabled httpd')
g.V('AmzLinux2Tls-1').property(single, 'expected-outcome','Should return a value enabled')
g.V('AmzLinux2Tls-1').property(single, 'purpose','Even though Apache Web Server is installed it should be running for subsequent steps')
g.addV('process-step').property('id', 'AmzLinux2Tls-1a').property('name', 'Auto start Apache Web Server on booting')
g.V('AmzLinux2Tls-1').addE('NEXT_OPTIONAL').to(g.V('AmzLinux2Tls-1a'))
g.V('AmzLinux2Tls-1a').property(single, 'command', 'sudo systemctl start httpd && sudo systemctl enable httpd')
g.V('AmzLinux2Tls-1a').property(single, 'expected-outcome','Should be a empty prompt returned')
g.V('AmzLinux2Tls-1a').property(single, 'purpose','To save the trouble of starting Apache Web Server every time manually.')
g.addV('process-step').property('id', 'AmzLinux2Tls-2').property('name', 'Update all software packages')
g.V('AmzLinux2Tls-1').addE('NEXT').to(g.V('AmzLinux2Tls-2'))
g.V('AmzLinux2Tls-2').property(single, 'command', 'sudo yum update -y')
g.V('AmzLinux2Tls-2').property(single, 'expected-outcome','Multiple prints on the standard ouput can happen. Should ensure no error appears.')
g.V('AmzLinux2Tls-2').property(single, 'purpose','To update all the software packages to latest version.')
g.addV('process-step').property('id', 'AmzLinux2Tls-3').property('name', 'Install TLS module for Apache')
g.V('AmzLinux2Tls-2').addE('NEXT').to(g.V('AmzLinux2Tls-3'))
g.V('AmzLinux2Tls-3').property(single, 'command', 'sudo yum install -y mod_ssl')
g.V('AmzLinux2Tls-3').property(list, 'expected-outcome','File should exist /etc/httpd/conf.d/ssl.conf')
g.V('AmzLinux2Tls-3').property(list, 'expected-outcome','File should exist /etc/pki/tls/certs/make-dummy-cert')
g.V('AmzLinux2Tls-3').property(single, 'purpose','Installs the module required for Apache to accept HTTPS connections')
g.V('AmzLinux2Tls-3').property(list, 'comments','/etc/httpd/conf.d/ssl.conf is configuration file for mod_ssl. Contains entries for TLS version, encryption keys, encryption ciphers to accept and certificates')
g.V('AmzLinux2Tls-3').property(list, 'comments','/etc/pki/tls/certs/make-dummy-cert is script to generate self-signed X.509 certificate and private key for the web server.')
g.addV('process-step').property('id', 'AmzLinux2Tls-4').property('name', 'Generate self-signed certificate')
g.V('AmzLinux2Tls-3').addE('NEXT').to(g.V('AmzLinux2Tls-4'))
g.V('AmzLinux2Tls-4').property(list, 'command', '1> cd /etc/pki/tls/certs')
g.V('AmzLinux2Tls-4').property(list, 'command', '2> ./make-dummy-cert localhost.crt')
g.V('AmzLinux2Tls-4').property(list, 'expected-outcome','File should exist /etc/pki/tls/certs/localhost.crt')
g.V('AmzLinux2Tls-4').property(single, 'purpose','Self-signed certificate are cheaper way to boot up and test TLS support.')
g.V('AmzLinux2Tls-4').property(list, 'comments','/etc/httpd/conf.d/ssl.conf already carries the name of localhost.crt for SSLCertificateFile directive. Thus, no change is required.')
g.V('AmzLinux2Tls-4').property(list, 'comments','The file contains both self-signed certificate and the certificate\'s private key.')
g.V('AmzLinux2Tls-4').property(list, 'comments','Though PEM is a widely used format. But that is only convinence. The file structure (with BEGIN and END markers for key and certificate) is important and crt file extension is just fine.')
g.addV('process-step').property('id', 'AmzLinux2Tls-5').property('name', 'Disable a seperate key file directive')
g.V('AmzLinux2Tls-4').addE('NEXT').to(g.V('AmzLinux2Tls-5'))
g.V('AmzLinux2Tls-5').property(single, 'instruction', 'comment the line resembling "SSLCertificateKeyFile /etc/pki/tls/private/localhost.key"')
g.V('AmzLinux2Tls-5').property(single, 'purpose','Self-signed certificate does not have a seperate file for key, thus commenting this line shunts Apache to look for a localhost.key file.')
g.addV('process-step').property('id', 'AmzLinux2Tls-6').property('name', 'Restart Apache Web Server')
g.V('AmzLinux2Tls-5').addE('NEXT').to(g.V('AmzLinux2Tls-6'))
g.V('AmzLinux2Tls-6').property(single, 'command', 'sudo systemctl restart httpd')
g.V('AmzLinux2Tls-6').property(single, 'purpose','Ensure Apache picks up the changes.')
g.addV('process-step').property('id', 'AmzLinux2Tls-7').property('name', 'Test the process')
g.V('AmzLinux2Tls-6').addE('NEXT').to(g.V('AmzLinux2Tls-7'))
g.V('AmzLinux2Tls-7').property(single, 'instruction', 'browse to the public IP or the domain name using https://')
g.V('AmzLinux2Tls-7').property(list, 'expected-outcome','You should be greated with security warning')
g.V('AmzLinux2Tls-7').property(list, 'expected-outcome','After accepting the risk, default page of the site should load.')
g.addV('process').property('id','PublicCaCert').property('name', 'Process to obtain public CA certificate')
g.V('PublicCaCert').addE('CONTRIBUTES_SECURITY').to(g.V('Instance'))
g.addV('process-step').property('id','PublicCaCert-1').property('name', 'Generate a Certificate Signing Request (CSR) from a private key')
g.addV('process-step').property('id','PublicCaCert-2').property('name', 'Submit the CSR to a Certificate Authority(CA)')
g.addV('process-step').property('id','PublicCaCert-3').property('name', 'Obtain a signed host certificate')
g.addV('process-step').property('id','PublicCaCert-3').property('name', 'Configure Apache to use the certificate')